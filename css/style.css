*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  box-sizing: border-box;
  font-size: 62.5%;
  /* 1rem = exactly 10 pixels. 10px / 16px = 62.5% */ }

body {
  font-family: "Nunito", sans-serif;
  color: #6D5D4B;
  font-weight: 300;
  line-height: 1.6; }

.container {
  display: grid;
  grid-template-rows: 80vh min-content 40vw repeat(3, min-content);
  /* First row has a height of 80vh */
  /* Second row is to fit the content inside of it so min-content or auto would work here */
  /* Third row adapts to viewport width so 40vw */
  /* Last few rows are all min-content, fitting the contents as well*/
  grid-template-columns: [sidebar-start] 8rem [sidebar-end full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem) [col-end]) [center-end] minmax(6rem, 1fr) [full-end];
  /* 8 equally sized columns with fixed width occupying the viewport*/
  /* 1140 / 8 = 142.5 pixels, so round down to 140px */
  /* Max is 14rem, can be lower. But never below the main content. Without this, width is set. With this, width is responsive */
  /* Have 8 equally sized columns in middle, but with 1fr on each side, fills up width and center the 8 columns. Having min 6rem will ensure there's always a margin */ }

.heading-1, .heading-2, .heading-3, .heading-4 {
  font-family: "Josefin Sans", sans-serif;
  font-weight: 400; }

/* The extend. The classes are going IN the selector */
.heading-2 {
  font-size: 4rem;
  font-style: italic;
  line-height: 1; }
  .heading-2--light {
    color: #f9f7f6; }
  .heading-2--dark {
    color: #54483A; }

.heading-3 {
  font-size: 1.6rem;
  color: #c69963;
  text-transform: uppercase; }

.heading-4 {
  font-size: 1.9rem; }
  .heading-4--light {
    color: #f9f7f6; }
  .heading-4--dark {
    color: #54483A; }

.btn {
  background-color: #c69963;
  color: white;
  border: none;
  border-radius: 0;
  font-family: "Josefin Sans", sans-serif;
  font-size: 1.5rem;
  text-transform: uppercase;
  padding: 1.8rem 3rem;
  cursor: pointer;
  transition: all .2s; }
  .btn:hover {
    background-color: #B28451; }

.mb-sm {
  margin-bottom: 2rem; }

.mb-md {
  margin-bottom: 3rem; }

.mb-lg {
  margin-bottom: 4rem; }

.mb-hg {
  margin-bottom: 8rem; }

.sidebar {
  background-color: #c69963;
  grid-column: sidebar-start / sidebar-end;
  grid-row: 1 / -1; }

.header {
  background-color: #54483A;
  grid-column: full-start / col-end 6; }

.realtors {
  background-color: #101d2c;
  grid-column: col-start 7/full-end; }

.features {
  grid-column: center-start / center-end;
  margin: 15rem 0;
  display: grid;
  /* grid-template-columns: repeat(3, 1fr); */
  /* 3 equally sized columns */
  grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
  /* Auto will create as many tracks as can fit in the width we define */
  grid-gap: 6rem;
  align-items: start;
  /* Without this, items are automatically stretched, so they're not all aligned.
    Now they're all aligned */ }

.feature {
  display: grid;
  grid-template-columns: min-content 1fr;
  /* The first column is the icon so we can put 4.5rem. 
    But by having min-content, if we change the icon size in the future, this will adjust to that size */
  /* The content defines the columns */
  grid-row-gap: 1.5rem;
  grid-column-gap: 2.5rem;
  /* These will add some spacing between the grids. So no need for margin this or margin that */ }
  .feature__icon {
    fill: #c69963;
    /* To color the SVG's */
    width: 4.5rem;
    height: 4.5rem;
    grid-row: 1 / span 2;
    /* -1 only means end of EXPLICIT grid, NOT implicit.
        So we use span instead */
    /* Now, the icon will push the text to the right side */
    transform: translateY(-1rem); }
  .feature__text {
    font-size: 1.7rem; }

.story__pictures {
  grid-column: full-start / col-end 4;
  background-image: linear-gradient(rgba(198, 153, 99, 0.5), rgba(198, 153, 99, 0.5)), url(../img/back.jpg);
  display: grid;
  grid-template-rows: repeat(6, 1fr);
  grid-template-columns: repeat(6, 1fr);
  align-items: center;
  /* This will center the picture in grid if aspect ratio doesn't*/ }

.story__img--1 {
  width: 100%;
  /* Always have width for images so they remain flexible */
  grid-column: 2 / 6;
  grid-row: 2 / 6;
  /* Images' aspect ratio sometimes will not fill entire grid areas*/
  box-shadow: 0 2rem 5rem rgba(0, 0, 0, 0.1); }

.story__img--2 {
  width: 115%;
  /* The picture is now too big to be seen, but z-index will bring it up */
  grid-column: 4 / 7;
  grid-row: 4 / 6;
  z-index: 100;
  box-shadow: 0 2rem 5rem rgba(0, 0, 0, 0.2); }

.story__content {
  background-color: #f9f7f6;
  grid-column: col-start 5 / full-end;
  padding: 6rem 8vw;
  /* display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: flex-start; */
  /* Button is stretched, but flex start will reset it back to original width */
  /* Will work too */
  display: grid;
  align-content: center;
  justify-items: start; }

.story__text {
  font-size: 1.5rem;
  font-style: italic;
  margin-bottom: 4rem;
  /* No helper class because this isn't going to be reused */ }

.homes {
  grid-column: center-start / center-end;
  margin: 15rem 0;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
  /* Fit as many as can on one column. Minimum is 25rem up to 1fr if there's enough space*/
  grid-gap: 7rem; }

.home {
  background-color: #f9f7f6;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-row-gap: 3.5rem; }
  .home__img {
    width: 100%;
    grid-row: 1 / 2;
    /* If grid-row isn't explicitly said, the heart icon will push the picture down */
    grid-column: 1 / -1;
    z-index: 1; }
  .home__like {
    grid-row: 1 / 2;
    grid-column: 2 / 3;
    fill: #c69963;
    height: 2.5rem;
    width: 2.5rem;
    z-index: 2;
    justify-self: end;
    margin: 1rem; }
  .home__name {
    grid-row: 1 / 2;
    grid-column: 1 / -1;
    justify-self: center;
    align-self: end;
    z-index: 3;
    width: 80%;
    font-family: "Josefin Sans", sans-serif;
    font-size: 1.6rem;
    text-align: center;
    padding: 1.25rem;
    background-color: #101d2c;
    color: white;
    font-weight: 400;
    transform: translateY(50%); }
  .home__location, .home__rooms {
    margin-top: 2.5rem; }
  .home__location, .home__rooms, .home__area, .home__price {
    font-size: 1.5rem;
    margin-left: 2rem;
    display: flex;
    /* Display flex will put the icon next to its respective text */
    align-items: center; }
    .home__location svg, .home__rooms svg, .home__area svg, .home__price svg {
      fill: #c69963;
      height: 2rem;
      width: 2rem;
      margin-right: 1rem; }
  .home__btn {
    grid-column: 1 / -1; }

.gallery {
  background-color: #f9f7f6;
  grid-column: full-start / full-end;
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  grid-template-rows: repeat(7, 5vw);
  grid-gap: 1.5rem;
  /* Doesn't give gap around grids */
  padding: 1.5rem;
  /* Gives padding around the container */ }
  .gallery__item--1 {
    grid-row: 1 / span 2;
    grid-column: 1 / span 2; }
  .gallery__item--2 {
    grid-row: 1 / span 3;
    grid-column: 3 / span 3; }
  .gallery__item--3 {
    grid-row: 1 / span 2;
    grid-column: 6 / 7; }
  .gallery__item--4 {
    grid-row: 1 / span 2;
    grid-column: 7 / -1; }
  .gallery__item--5 {
    grid-row: 3 / span 3;
    grid-column: 1 / span 2; }
  .gallery__item--6 {
    grid-row: 4 / span 2;
    grid-column: 3 / span 2; }
  .gallery__item--7 {
    grid-row: 4 / 5;
    grid-column: 5 / 6; }
  .gallery__item--8 {
    grid-row: 3 / span 2;
    grid-column: 6 / span 2; }
  .gallery__item--9 {
    grid-row: 3 / span 3;
    grid-column: 8 / -1; }
  .gallery__item--10 {
    grid-row: 6 / span 2;
    grid-column: 1 / 2; }
  .gallery__item--11 {
    grid-row: 6 / span 2;
    grid-column: 2 / span 2; }
  .gallery__item--12 {
    grid-row: 6 / span 2;
    grid-column: 4 / 5; }
  .gallery__item--13 {
    grid-row: 5 / span 3;
    grid-column: 5 / span 3; }
  .gallery__item--14 {
    grid-row: 6 / span 2;
    grid-column: 8 / -1; }
  .gallery__img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    /* only works if you have width and height */
    /* Specifies how an <img> or <video> should be resized to fit its container*/
    /* object-fit cover will maintain aspect ratio and cut parts of image */
    display: block; }

.footer {
  background-color: #101d2c;
  grid-column: full-start / full-end; }
